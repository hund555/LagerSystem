@page "/BorrowedItems"

@page "/BorrowedItems/{UserId:int}"

@using DataLayer.Entities
@inject NavigationManager navigate

@inject ServiceLayer.ILagerService _lagerService

<h3>BorrowedItems</h3>
<hr />
<div class="row">
    <div class="col-md-3">
        <select class="form-control" @bind="UserId">
            <option value="0">Alle</option>
            @foreach (var user in Users)
            {
                <option value="@user.UserId">@user.Name</option>
            }
        </select>
    </div>
    <div class="col-md-2">
        <button class="btn btn-primary" @onclick="Find">Søg</button>
    </div>
    @if (ShowReturnMultible == true)
    {
        <div class="col-md-2">
            <button class="btn btn-warning" @onclick="ReturnAllItems">Aflever alt</button>
        </div>
    }
</div>
<hr />

@foreach (var item in items)
{
    <div class="row">
        <div class="col-md-3">
            @item.ItemName
        </div>
        <div class="col-md-5">
            @item.Discription
        </div>
        <div class="col-md-2">
            @item.User.Name
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary" @onclick="(() => ReturnItem(item.ItemId))">Aflever</button>
            <button class="btn btn-primary" @onclick="(() => DeleteItem(item.ItemId))">Slet</button>
            <a class="btn btn-primary" href="/EditItem/@item.ItemId/">Redigér</a>
        </div>
    </div>
    <hr />
}

@code {
    private IList<Item> items { get; set; }

    private IList<User> Users { get; set; }

    [Parameter]
    public int UserId { get; set; }
    public bool ShowReturnMultible { get; set; } = false;

    protected override void OnInitialized()
    {
        if (UserId == 0)
        {
            items = _lagerService.GetItemsNotInStorege().ToList();

        }
        else
        {
            items = _lagerService.GetUsersItems(UserId).ToList();
            ShowReturnMultible = true;
        }
        Users = _lagerService.GetAllUsers().ToList();
    }

    private async Task DeleteItem(int itemId)
    {
        await _lagerService.DeleteItem(itemId);
        items.Remove(items.FirstOrDefault(i => i.ItemId == itemId));
    }

    private void Find()
    {
        if (UserId > 0)
        {
            ShowReturnMultible = true;
        }
        navigate.NavigateTo($"/BorrowedItems/{UserId}", true);
    }

    private async Task ReturnItem(int itemId)
    {
        await _lagerService.ReturnItem(itemId);
        items.Remove(items.FirstOrDefault(i => i.ItemId == itemId));
    }

    private async Task ReturnAllItems()
    {
        List<int> itemIdList = new List<int>();
        foreach (Item item in items)
        {
            itemIdList.Add(item.ItemId);
        }

        await _lagerService.ReturnAllItems(itemIdList);
        navigate.NavigateTo($"/BorrowedItems", true);
    }
}
